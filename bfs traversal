#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
// A C program to demonstrate linked list based implementation of queue
 
// A linked list (LL) node to store a queue entry
struct QNode* newNode(int );
struct Queue *createQueue();

void enQueue(struct Queue* , int );
struct QNode *deQueue(struct Queue *);
struct AdjListNode* newAdjListNode(int );
struct Graph* createGraph(int );
void addEdge(struct Graph* , int , int );
 void BFS(struct Graph* ,int  );

struct QNode
{
    int key;
    struct QNode *next;
};
 
// The queue, front stores the front node of LL and rear stores ths
// last node of LL
struct Queue
{
    struct QNode *front, *rear;
};
 
// A utility function to create a new linked list node.
struct QNode* newNode(int k)
{
    struct QNode *temp = (struct QNode*)malloc(sizeof(struct QNode));
    temp->key = k;
    temp->next = NULL;
    return temp; 
}
 
// A utility function to create an empty queue
struct Queue *createQueue()
{
    struct Queue *q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = q->rear = NULL;
    return q;
}
 
// The function to add a key k to q
void enQueue(struct Queue *q, int k)
{
    // Create a new LL node
    struct QNode *temp = newNode(k);
 
    // If queue is empty, then new node is front and rear both
    if (q->rear == NULL)
    {
       q->front = q->rear = temp;
       return;
    }
 
    // Add the new node at the end of queue and change rear
    q->rear->next = temp;
    q->rear = temp;
    
}
 
// Function to remove a key from given queue q
struct QNode *deQueue(struct Queue *q)
{
    // If queue is empty, return NULL.
    if (q->front == NULL)
       return NULL;
 
    // Store previous front and move front one node ahead
    struct QNode *temp = q->front;
    q->front = q->front->next;
 
    // If front becomes NULL, then change rear also as NULL
    if (q->front == NULL)
       q->rear = NULL;
    return temp;
}
 
// A structure to represent an adjacency list node
struct AdjListNode
{
    int dest;
    struct AdjListNode* next;
};
 
// A structure to represent an adjacency list
struct AdjList
{
    struct AdjListNode *head;  // pointer to head node of list
};
 
// A structure to represent a graph. A graph is an array of adjacency lists.
// Size of array will be V (number of vertices in graph)
struct Graph
{
    int V;
    struct AdjList* array;
};
 
// A utility function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest)
{
    struct AdjListNode* newNode =
            (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}
 
// A utility function that creates a graph of V vertices
struct Graph* createGraph(int V)
{
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->V = V;
 
    // Create an array of adjacency lists.  Size of array will be V
    graph->array = (struct AdjList*) malloc(V * sizeof(struct AdjList));
 
     // Initialize each adjacency list as empty by making head as NULL
    int i;
    for (i = 0; i < V; ++i)
        graph->array[i].head = NULL;
 
    return graph;
}
void print_color(int visited[],int n)
{
	int i;
	for(i=0;i<n;i++)
	{
		if(visited[i]==true)
			printf(" B\t");
		else if(visited[i]==false)
			printf(" G\t");
		else
			printf(" R\t");
	}
}

 void print_queue(struct Queue *q)
{

        struct QNode *p=q->front;

	printf("[ ");
	while(p)
	{
		printf("%2d",p->key+1);p=p->next;
		if(p)
			printf(", ");
	}
	printf(" ]\n\n");
}
// Adds an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest)
{
    // Add an edge from src to dest.  A new node is added to the adjacency
    // list of src.  The node is added at the begining
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;
 
  /*  // Since graph is undirected, add an edge from dest to src also
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;*/
}
 void BFS(struct Graph* graph,int s)
 {   int i;
     char color[1000];
     struct AdjListNode* j;
int jk=1;
   struct AdjListNode* pCrawl;
     int visited[graph->V];
     for(i=0;i<graph->V;i++)
         visited[i]=0;
     for(i=0;i<graph->V;i++){
         color[i]='G';
     printf("\t G");
}
printf("\n");
     int distance[graph->V];
     for(i=0;i<graph->V;i++)
     distance[i]=-1; 
     
     int parent[graph->V];
     for(i=0;i<graph->V;i++)
     parent[i]=-1; 
     
     struct Queue *q = createQueue();
     visited[s]=1;
     color[s]='B';
     distance[s]=0;
     printf("\t"),print_color(visited,graph->V),printf("d[%d] = %d\tp[%d] = %d\t",s+1,distance[s],s+1,parent[s]),print_queue(q);
     enQueue(q,s);
    while(q->front!=NULL)
    {   
      
          struct QNode *n=q->front;
        s=n->key;
          int v=n->key;
       //printf("D%d ",n->key);

	      for(pCrawl = graph->array[v].head;pCrawl!=NULL;pCrawl = pCrawl->next)
		    {
               	//printf("-> %d", pCrawl->dest);
               int u=pCrawl->dest;
              if(visited[(pCrawl->dest)]==0)
               {
                  color[pCrawl->dest]='B';
                 jk++;
                 visited[pCrawl->dest] = 1;
                   /*for(i=0;i<graph->V;i++)
                  printf("%c ",color[i]);
                 // printf("\n");*/
                   
                  // printf("C%d ",pCrawl->dest);
                 // printf("\n");
                 // printf("V(%d) N(%d)",visited[pCrawl->dest],pCrawl->dest);
                 distance[pCrawl->dest]=distance[n->key]+6;
                  //printf("D(%d)=%d  ",pCrawl->dest,distance[pCrawl->dest]);
                 parent[pCrawl->dest]=n->key;
                //printf("P(%d)=%d",pCrawl->dest,parent[pCrawl->dest]);
                 enQueue(q,pCrawl->dest);
                 printf("\t"),print_color(visited,graph->V),printf("d[%d] = %d\tp[%d] = %d\t",u+1,distance[u],u+1,parent[u]),print_queue(q);
                 
              }//end of if
           printf("\n");
             }//end of for
          deQueue(q);
	visited[v]=2;
        /*color[s]='R';
        for(i=0;i<graph->V;i++)        
              printf("%c ",color[i]);          
                  printf("\n");*/
if(jk==graph->V)
    printf("\t"),print_color(visited,graph->V),printf("\t\t\t\t"),print_queue(q);
    printf("\n");
        }//end of second while
      
     }//end of function
 
int main()
{int V=7;
     struct Graph* graph = createGraph(V);
  addEdge(graph,6, 5);
	  addEdge(graph,6, 2);
	  addEdge(graph,5, 6);
	  addEdge(graph,5, 3);
	  addEdge(graph,4, 3);
      addEdge(graph,4, 2);	
	  addEdge(graph,4, 1);
	  addEdge(graph,3, 5);
	   addEdge(graph,3, 4);
	       addEdge(graph,3, 0);
	       addEdge(graph,2, 6);
	       addEdge(graph,2, 4);	
	        addEdge(graph,2, 1);
	         addEdge(graph,1, 4);
	          addEdge(graph,1, 2);
	           addEdge(graph,1, 0);
	            addEdge(graph,0, 3);
	            addEdge(graph,0, 1);
	 
   
 
   printf("Following is Breadth First Traversal (starting from vertex 0) \n");
    BFS(graph,0);
 
 
    return 0;
}
